Design patterns we used:

-----Builder--------
Class: Use Case - EventBuilder

We used builder for event in the use case since there are multiple parameter for the event constructor
and builder pattern can help with construction of this kind of object from its representation so that the
same construction process can create a simpler representation of initializing an event.

------Simple Factory------
Class: Use Case - EventFactory

We used a factory for events since there are different types of events that may be constructed.
Instead of using different classes to construct different types of events, a factory for event can
decide which type of object it is creating.

Class: Use Case - UserFactory

We are using UserFactory which is a Factory method for adding new user  by UsersManager.
Since we are having four different type of users, organizer, attendee, speaker and admin under user entity class,
if we want to add a new user type in the future that may extend user class. We just need to make some change
in UserFactory instead of UsersManager so that it improves the extensibility for future types of users.